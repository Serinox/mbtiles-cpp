// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vector_tile.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "vector_tile.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace vector_tile {
class Tile_ValueDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Tile_Value>
     _instance;
} _Tile_Value_default_instance_;
class Tile_FeatureDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Tile_Feature>
     _instance;
} _Tile_Feature_default_instance_;
class Tile_LayerDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Tile_Layer>
     _instance;
} _Tile_Layer_default_instance_;
class TileDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Tile>
     _instance;
} _Tile_default_instance_;

namespace protobuf_vector_5ftile_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Tile_Value_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Tile_Value_default_instance_);_Tile_Feature_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Tile_Feature_default_instance_);_Tile_Layer_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Tile_Layer_default_instance_);_Tile_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Tile_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_vector_5ftile_2eproto

bool Tile_GeomType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Tile_GeomType Tile::UNKNOWN;
const Tile_GeomType Tile::POINT;
const Tile_GeomType Tile::LINESTRING;
const Tile_GeomType Tile::POLYGON;
const Tile_GeomType Tile::GeomType_MIN;
const Tile_GeomType Tile::GeomType_MAX;
const int Tile::GeomType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Tile_Value::kStringValueFieldNumber;
const int Tile_Value::kFloatValueFieldNumber;
const int Tile_Value::kDoubleValueFieldNumber;
const int Tile_Value::kIntValueFieldNumber;
const int Tile_Value::kUintValueFieldNumber;
const int Tile_Value::kSintValueFieldNumber;
const int Tile_Value::kBoolValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Tile_Value::Tile_Value()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_vector_5ftile_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:vector_tile.Tile.Value)
}
Tile_Value::Tile_Value(const Tile_Value& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_string_value()) {
    string_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.string_value_);
  }
  ::memcpy(&double_value_, &from.double_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&sint_value_) -
    reinterpret_cast<char*>(&double_value_)) + sizeof(sint_value_));
  // @@protoc_insertion_point(copy_constructor:vector_tile.Tile.Value)
}

void Tile_Value::SharedCtor() {
  _cached_size_ = 0;
  string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&double_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sint_value_) -
      reinterpret_cast<char*>(&double_value_)) + sizeof(sint_value_));
}

Tile_Value::~Tile_Value() {
  // @@protoc_insertion_point(destructor:vector_tile.Tile.Value)
  SharedDtor();
}

void Tile_Value::SharedDtor() {
  string_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Tile_Value::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Tile_Value& Tile_Value::default_instance() {
  protobuf_vector_5ftile_2eproto::InitDefaults();
  return *internal_default_instance();
}

Tile_Value* Tile_Value::New(::google::protobuf::Arena* arena) const {
  Tile_Value* n = new Tile_Value;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Tile_Value::Clear() {
// @@protoc_insertion_point(message_clear_start:vector_tile.Tile.Value)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  if (has_string_value()) {
    GOOGLE_DCHECK(!string_value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*string_value_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 126u) {
    ::memset(&double_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sint_value_) -
        reinterpret_cast<char*>(&double_value_)) + sizeof(sint_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Tile_Value::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:vector_tile.Tile.Value)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string string_value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float float_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_float_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &float_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double double_value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_double_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &double_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 int_value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_int_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &int_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 uint_value = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_uint_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uint_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 sint_value = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_sint_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &sint_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bool_value = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_bool_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bool_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        if ((64u <= tag)) {
          DO_(_extensions_.ParseField(tag, input,
              internal_default_instance(),
              &unknown_fields_stream));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vector_tile.Tile.Value)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vector_tile.Tile.Value)
  return false;
#undef DO_
}

void Tile_Value::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vector_tile.Tile.Value)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string string_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->string_value(), output);
  }

  // optional float float_value = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->float_value(), output);
  }

  // optional double double_value = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->double_value(), output);
  }

  // optional int64 int_value = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->int_value(), output);
  }

  // optional uint64 uint_value = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->uint_value(), output);
  }

  // optional sint64 sint_value = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(6, this->sint_value(), output);
  }

  // optional bool bool_value = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->bool_value(), output);
  }

  // Extension range [8, 536870912)
  _extensions_.SerializeWithCachedSizes(
      8, 536870912, output);

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:vector_tile.Tile.Value)
}

size_t Tile_Value::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vector_tile.Tile.Value)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 127u) {
    // optional string string_value = 1;
    if (has_string_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string_value());
    }

    // optional double double_value = 3;
    if (has_double_value()) {
      total_size += 1 + 8;
    }

    // optional int64 int_value = 4;
    if (has_int_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->int_value());
    }

    // optional float float_value = 2;
    if (has_float_value()) {
      total_size += 1 + 4;
    }

    // optional bool bool_value = 7;
    if (has_bool_value()) {
      total_size += 1 + 1;
    }

    // optional uint64 uint_value = 5;
    if (has_uint_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uint_value());
    }

    // optional sint64 sint_value = 6;
    if (has_sint_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->sint_value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tile_Value::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Tile_Value*>(&from));
}

void Tile_Value::MergeFrom(const Tile_Value& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vector_tile.Tile.Value)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_string_value();
      string_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.string_value_);
    }
    if (cached_has_bits & 0x00000002u) {
      double_value_ = from.double_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      int_value_ = from.int_value_;
    }
    if (cached_has_bits & 0x00000008u) {
      float_value_ = from.float_value_;
    }
    if (cached_has_bits & 0x00000010u) {
      bool_value_ = from.bool_value_;
    }
    if (cached_has_bits & 0x00000020u) {
      uint_value_ = from.uint_value_;
    }
    if (cached_has_bits & 0x00000040u) {
      sint_value_ = from.sint_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Tile_Value::CopyFrom(const Tile_Value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vector_tile.Tile.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tile_Value::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void Tile_Value::Swap(Tile_Value* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Tile_Value::InternalSwap(Tile_Value* other) {
  using std::swap;
  string_value_.Swap(&other->string_value_);
  swap(double_value_, other->double_value_);
  swap(int_value_, other->int_value_);
  swap(float_value_, other->float_value_);
  swap(bool_value_, other->bool_value_);
  swap(uint_value_, other->uint_value_);
  swap(sint_value_, other->sint_value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::std::string Tile_Value::GetTypeName() const {
  return "vector_tile.Tile.Value";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Tile_Value

// optional string string_value = 1;
bool Tile_Value::has_string_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Tile_Value::set_has_string_value() {
  _has_bits_[0] |= 0x00000001u;
}
void Tile_Value::clear_has_string_value() {
  _has_bits_[0] &= ~0x00000001u;
}
void Tile_Value::clear_string_value() {
  string_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_string_value();
}
const ::std::string& Tile_Value::string_value() const {
  // @@protoc_insertion_point(field_get:vector_tile.Tile.Value.string_value)
  return string_value_.GetNoArena();
}
void Tile_Value::set_string_value(const ::std::string& value) {
  set_has_string_value();
  string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vector_tile.Tile.Value.string_value)
}
#if LANG_CXX11
void Tile_Value::set_string_value(::std::string&& value) {
  set_has_string_value();
  string_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vector_tile.Tile.Value.string_value)
}
#endif
void Tile_Value::set_string_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_string_value();
  string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vector_tile.Tile.Value.string_value)
}
void Tile_Value::set_string_value(const char* value, size_t size) {
  set_has_string_value();
  string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vector_tile.Tile.Value.string_value)
}
::std::string* Tile_Value::mutable_string_value() {
  set_has_string_value();
  // @@protoc_insertion_point(field_mutable:vector_tile.Tile.Value.string_value)
  return string_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Tile_Value::release_string_value() {
  // @@protoc_insertion_point(field_release:vector_tile.Tile.Value.string_value)
  clear_has_string_value();
  return string_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Tile_Value::set_allocated_string_value(::std::string* string_value) {
  if (string_value != NULL) {
    set_has_string_value();
  } else {
    clear_has_string_value();
  }
  string_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), string_value);
  // @@protoc_insertion_point(field_set_allocated:vector_tile.Tile.Value.string_value)
}

// optional float float_value = 2;
bool Tile_Value::has_float_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Tile_Value::set_has_float_value() {
  _has_bits_[0] |= 0x00000008u;
}
void Tile_Value::clear_has_float_value() {
  _has_bits_[0] &= ~0x00000008u;
}
void Tile_Value::clear_float_value() {
  float_value_ = 0;
  clear_has_float_value();
}
float Tile_Value::float_value() const {
  // @@protoc_insertion_point(field_get:vector_tile.Tile.Value.float_value)
  return float_value_;
}
void Tile_Value::set_float_value(float value) {
  set_has_float_value();
  float_value_ = value;
  // @@protoc_insertion_point(field_set:vector_tile.Tile.Value.float_value)
}

// optional double double_value = 3;
bool Tile_Value::has_double_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Tile_Value::set_has_double_value() {
  _has_bits_[0] |= 0x00000002u;
}
void Tile_Value::clear_has_double_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void Tile_Value::clear_double_value() {
  double_value_ = 0;
  clear_has_double_value();
}
double Tile_Value::double_value() const {
  // @@protoc_insertion_point(field_get:vector_tile.Tile.Value.double_value)
  return double_value_;
}
void Tile_Value::set_double_value(double value) {
  set_has_double_value();
  double_value_ = value;
  // @@protoc_insertion_point(field_set:vector_tile.Tile.Value.double_value)
}

// optional int64 int_value = 4;
bool Tile_Value::has_int_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Tile_Value::set_has_int_value() {
  _has_bits_[0] |= 0x00000004u;
}
void Tile_Value::clear_has_int_value() {
  _has_bits_[0] &= ~0x00000004u;
}
void Tile_Value::clear_int_value() {
  int_value_ = GOOGLE_LONGLONG(0);
  clear_has_int_value();
}
::google::protobuf::int64 Tile_Value::int_value() const {
  // @@protoc_insertion_point(field_get:vector_tile.Tile.Value.int_value)
  return int_value_;
}
void Tile_Value::set_int_value(::google::protobuf::int64 value) {
  set_has_int_value();
  int_value_ = value;
  // @@protoc_insertion_point(field_set:vector_tile.Tile.Value.int_value)
}

// optional uint64 uint_value = 5;
bool Tile_Value::has_uint_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Tile_Value::set_has_uint_value() {
  _has_bits_[0] |= 0x00000020u;
}
void Tile_Value::clear_has_uint_value() {
  _has_bits_[0] &= ~0x00000020u;
}
void Tile_Value::clear_uint_value() {
  uint_value_ = GOOGLE_ULONGLONG(0);
  clear_has_uint_value();
}
::google::protobuf::uint64 Tile_Value::uint_value() const {
  // @@protoc_insertion_point(field_get:vector_tile.Tile.Value.uint_value)
  return uint_value_;
}
void Tile_Value::set_uint_value(::google::protobuf::uint64 value) {
  set_has_uint_value();
  uint_value_ = value;
  // @@protoc_insertion_point(field_set:vector_tile.Tile.Value.uint_value)
}

// optional sint64 sint_value = 6;
bool Tile_Value::has_sint_value() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Tile_Value::set_has_sint_value() {
  _has_bits_[0] |= 0x00000040u;
}
void Tile_Value::clear_has_sint_value() {
  _has_bits_[0] &= ~0x00000040u;
}
void Tile_Value::clear_sint_value() {
  sint_value_ = GOOGLE_LONGLONG(0);
  clear_has_sint_value();
}
::google::protobuf::int64 Tile_Value::sint_value() const {
  // @@protoc_insertion_point(field_get:vector_tile.Tile.Value.sint_value)
  return sint_value_;
}
void Tile_Value::set_sint_value(::google::protobuf::int64 value) {
  set_has_sint_value();
  sint_value_ = value;
  // @@protoc_insertion_point(field_set:vector_tile.Tile.Value.sint_value)
}

// optional bool bool_value = 7;
bool Tile_Value::has_bool_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Tile_Value::set_has_bool_value() {
  _has_bits_[0] |= 0x00000010u;
}
void Tile_Value::clear_has_bool_value() {
  _has_bits_[0] &= ~0x00000010u;
}
void Tile_Value::clear_bool_value() {
  bool_value_ = false;
  clear_has_bool_value();
}
bool Tile_Value::bool_value() const {
  // @@protoc_insertion_point(field_get:vector_tile.Tile.Value.bool_value)
  return bool_value_;
}
void Tile_Value::set_bool_value(bool value) {
  set_has_bool_value();
  bool_value_ = value;
  // @@protoc_insertion_point(field_set:vector_tile.Tile.Value.bool_value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Tile_Feature::kIdFieldNumber;
const int Tile_Feature::kTagsFieldNumber;
const int Tile_Feature::kTypeFieldNumber;
const int Tile_Feature::kGeometryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Tile_Feature::Tile_Feature()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_vector_5ftile_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:vector_tile.Tile.Feature)
}
Tile_Feature::Tile_Feature(const Tile_Feature& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      tags_(from.tags_),
      geometry_(from.geometry_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:vector_tile.Tile.Feature)
}

void Tile_Feature::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
}

Tile_Feature::~Tile_Feature() {
  // @@protoc_insertion_point(destructor:vector_tile.Tile.Feature)
  SharedDtor();
}

void Tile_Feature::SharedDtor() {
}

void Tile_Feature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Tile_Feature& Tile_Feature::default_instance() {
  protobuf_vector_5ftile_2eproto::InitDefaults();
  return *internal_default_instance();
}

Tile_Feature* Tile_Feature::New(::google::protobuf::Arena* arena) const {
  Tile_Feature* n = new Tile_Feature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Tile_Feature::Clear() {
// @@protoc_insertion_point(message_clear_start:vector_tile.Tile.Feature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  geometry_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&id_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Tile_Feature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:vector_tile.Tile.Feature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 tags = 2 [packed = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_tags())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18u, input, this->mutable_tags())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .vector_tile.Tile.GeomType type = 3 [default = UNKNOWN];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::vector_tile::Tile_GeomType_IsValid(value)) {
            set_type(static_cast< ::vector_tile::Tile_GeomType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 geometry = 4 [packed = true];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_geometry())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34u, input, this->mutable_geometry())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vector_tile.Tile.Feature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vector_tile.Tile.Feature)
  return false;
#undef DO_
}

void Tile_Feature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vector_tile.Tile.Feature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 id = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // repeated uint32 tags = 2 [packed = true];
  if (this->tags_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _tags_cached_byte_size_));
  }
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->tags(i), output);
  }

  // optional .vector_tile.Tile.GeomType type = 3 [default = UNKNOWN];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // repeated uint32 geometry = 4 [packed = true];
  if (this->geometry_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _geometry_cached_byte_size_));
  }
  for (int i = 0, n = this->geometry_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->geometry(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:vector_tile.Tile.Feature)
}

size_t Tile_Feature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vector_tile.Tile.Feature)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated uint32 tags = 2 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->tags_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _tags_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 geometry = 4 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->geometry_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _geometry_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional .vector_tile.Tile.GeomType type = 3 [default = UNKNOWN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tile_Feature::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Tile_Feature*>(&from));
}

void Tile_Feature::MergeFrom(const Tile_Feature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vector_tile.Tile.Feature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  geometry_.MergeFrom(from.geometry_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Tile_Feature::CopyFrom(const Tile_Feature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vector_tile.Tile.Feature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tile_Feature::IsInitialized() const {
  return true;
}

void Tile_Feature::Swap(Tile_Feature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Tile_Feature::InternalSwap(Tile_Feature* other) {
  using std::swap;
  tags_.InternalSwap(&other->tags_);
  geometry_.InternalSwap(&other->geometry_);
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string Tile_Feature::GetTypeName() const {
  return "vector_tile.Tile.Feature";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Tile_Feature

// optional uint64 id = 1 [default = 0];
bool Tile_Feature::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Tile_Feature::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Tile_Feature::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Tile_Feature::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
::google::protobuf::uint64 Tile_Feature::id() const {
  // @@protoc_insertion_point(field_get:vector_tile.Tile.Feature.id)
  return id_;
}
void Tile_Feature::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:vector_tile.Tile.Feature.id)
}

// repeated uint32 tags = 2 [packed = true];
int Tile_Feature::tags_size() const {
  return tags_.size();
}
void Tile_Feature::clear_tags() {
  tags_.Clear();
}
::google::protobuf::uint32 Tile_Feature::tags(int index) const {
  // @@protoc_insertion_point(field_get:vector_tile.Tile.Feature.tags)
  return tags_.Get(index);
}
void Tile_Feature::set_tags(int index, ::google::protobuf::uint32 value) {
  tags_.Set(index, value);
  // @@protoc_insertion_point(field_set:vector_tile.Tile.Feature.tags)
}
void Tile_Feature::add_tags(::google::protobuf::uint32 value) {
  tags_.Add(value);
  // @@protoc_insertion_point(field_add:vector_tile.Tile.Feature.tags)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Tile_Feature::tags() const {
  // @@protoc_insertion_point(field_list:vector_tile.Tile.Feature.tags)
  return tags_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Tile_Feature::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:vector_tile.Tile.Feature.tags)
  return &tags_;
}

// optional .vector_tile.Tile.GeomType type = 3 [default = UNKNOWN];
bool Tile_Feature::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Tile_Feature::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void Tile_Feature::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void Tile_Feature::clear_type() {
  type_ = 0;
  clear_has_type();
}
::vector_tile::Tile_GeomType Tile_Feature::type() const {
  // @@protoc_insertion_point(field_get:vector_tile.Tile.Feature.type)
  return static_cast< ::vector_tile::Tile_GeomType >(type_);
}
void Tile_Feature::set_type(::vector_tile::Tile_GeomType value) {
  assert(::vector_tile::Tile_GeomType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:vector_tile.Tile.Feature.type)
}

// repeated uint32 geometry = 4 [packed = true];
int Tile_Feature::geometry_size() const {
  return geometry_.size();
}
void Tile_Feature::clear_geometry() {
  geometry_.Clear();
}
::google::protobuf::uint32 Tile_Feature::geometry(int index) const {
  // @@protoc_insertion_point(field_get:vector_tile.Tile.Feature.geometry)
  return geometry_.Get(index);
}
void Tile_Feature::set_geometry(int index, ::google::protobuf::uint32 value) {
  geometry_.Set(index, value);
  // @@protoc_insertion_point(field_set:vector_tile.Tile.Feature.geometry)
}
void Tile_Feature::add_geometry(::google::protobuf::uint32 value) {
  geometry_.Add(value);
  // @@protoc_insertion_point(field_add:vector_tile.Tile.Feature.geometry)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Tile_Feature::geometry() const {
  // @@protoc_insertion_point(field_list:vector_tile.Tile.Feature.geometry)
  return geometry_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Tile_Feature::mutable_geometry() {
  // @@protoc_insertion_point(field_mutable_list:vector_tile.Tile.Feature.geometry)
  return &geometry_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Tile_Layer::kVersionFieldNumber;
const int Tile_Layer::kNameFieldNumber;
const int Tile_Layer::kFeaturesFieldNumber;
const int Tile_Layer::kKeysFieldNumber;
const int Tile_Layer::kValuesFieldNumber;
const int Tile_Layer::kExtentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Tile_Layer::Tile_Layer()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_vector_5ftile_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:vector_tile.Tile.Layer)
}
Tile_Layer::Tile_Layer(const Tile_Layer& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      features_(from.features_),
      keys_(from.keys_),
      values_(from.values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&extent_, &from.extent_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&extent_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:vector_tile.Tile.Layer)
}

void Tile_Layer::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extent_ = 4096u;
  version_ = 1u;
}

Tile_Layer::~Tile_Layer() {
  // @@protoc_insertion_point(destructor:vector_tile.Tile.Layer)
  SharedDtor();
}

void Tile_Layer::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Tile_Layer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Tile_Layer& Tile_Layer::default_instance() {
  protobuf_vector_5ftile_2eproto::InitDefaults();
  return *internal_default_instance();
}

Tile_Layer* Tile_Layer::New(::google::protobuf::Arena* arena) const {
  Tile_Layer* n = new Tile_Layer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Tile_Layer::Clear() {
// @@protoc_insertion_point(message_clear_start:vector_tile.Tile.Layer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  features_.Clear();
  keys_.Clear();
  values_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    extent_ = 4096u;
    version_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Tile_Layer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:vector_tile.Tile.Layer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vector_tile.Tile.Feature features = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_features()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string keys = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vector_tile.Tile.Value values = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 extent = 5 [default = 4096];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_extent();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &extent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 version = 15 [default = 1];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        if ((128u <= tag)) {
          DO_(_extensions_.ParseField(tag, input,
              internal_default_instance(),
              &unknown_fields_stream));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vector_tile.Tile.Layer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vector_tile.Tile.Layer)
  return false;
#undef DO_
}

void Tile_Layer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vector_tile.Tile.Layer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .vector_tile.Tile.Feature features = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->features_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->features(static_cast<int>(i)), output);
  }

  // repeated string keys = 3;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->keys(i), output);
  }

  // repeated .vector_tile.Tile.Value values = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->values_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->values(static_cast<int>(i)), output);
  }

  // optional uint32 extent = 5 [default = 4096];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->extent(), output);
  }

  // required uint32 version = 15 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->version(), output);
  }

  // Extension range [16, 536870912)
  _extensions_.SerializeWithCachedSizes(
      16, 536870912, output);

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:vector_tile.Tile.Layer)
}

size_t Tile_Layer::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:vector_tile.Tile.Layer)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_version()) {
    // required uint32 version = 15 [default = 1];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  return total_size;
}
size_t Tile_Layer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vector_tile.Tile.Layer)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required uint32 version = 15 [default = 1];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .vector_tile.Tile.Feature features = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->features_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->features(static_cast<int>(i)));
    }
  }

  // repeated string keys = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->keys_size());
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keys(i));
  }

  // repeated .vector_tile.Tile.Value values = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->values_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->values(static_cast<int>(i)));
    }
  }

  // optional uint32 extent = 5 [default = 4096];
  if (has_extent()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->extent());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tile_Layer::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Tile_Layer*>(&from));
}

void Tile_Layer::MergeFrom(const Tile_Layer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vector_tile.Tile.Layer)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  features_.MergeFrom(from.features_);
  keys_.MergeFrom(from.keys_);
  values_.MergeFrom(from.values_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      extent_ = from.extent_;
    }
    if (cached_has_bits & 0x00000004u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Tile_Layer::CopyFrom(const Tile_Layer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vector_tile.Tile.Layer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tile_Layer::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->values())) return false;
  return true;
}

void Tile_Layer::Swap(Tile_Layer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Tile_Layer::InternalSwap(Tile_Layer* other) {
  using std::swap;
  features_.InternalSwap(&other->features_);
  keys_.InternalSwap(&other->keys_);
  values_.InternalSwap(&other->values_);
  name_.Swap(&other->name_);
  swap(extent_, other->extent_);
  swap(version_, other->version_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::std::string Tile_Layer::GetTypeName() const {
  return "vector_tile.Tile.Layer";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Tile_Layer

// required uint32 version = 15 [default = 1];
bool Tile_Layer::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Tile_Layer::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
void Tile_Layer::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
void Tile_Layer::clear_version() {
  version_ = 1u;
  clear_has_version();
}
::google::protobuf::uint32 Tile_Layer::version() const {
  // @@protoc_insertion_point(field_get:vector_tile.Tile.Layer.version)
  return version_;
}
void Tile_Layer::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:vector_tile.Tile.Layer.version)
}

// required string name = 1;
bool Tile_Layer::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Tile_Layer::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Tile_Layer::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Tile_Layer::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& Tile_Layer::name() const {
  // @@protoc_insertion_point(field_get:vector_tile.Tile.Layer.name)
  return name_.GetNoArena();
}
void Tile_Layer::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vector_tile.Tile.Layer.name)
}
#if LANG_CXX11
void Tile_Layer::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vector_tile.Tile.Layer.name)
}
#endif
void Tile_Layer::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vector_tile.Tile.Layer.name)
}
void Tile_Layer::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vector_tile.Tile.Layer.name)
}
::std::string* Tile_Layer::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:vector_tile.Tile.Layer.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Tile_Layer::release_name() {
  // @@protoc_insertion_point(field_release:vector_tile.Tile.Layer.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Tile_Layer::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:vector_tile.Tile.Layer.name)
}

// repeated .vector_tile.Tile.Feature features = 2;
int Tile_Layer::features_size() const {
  return features_.size();
}
void Tile_Layer::clear_features() {
  features_.Clear();
}
const ::vector_tile::Tile_Feature& Tile_Layer::features(int index) const {
  // @@protoc_insertion_point(field_get:vector_tile.Tile.Layer.features)
  return features_.Get(index);
}
::vector_tile::Tile_Feature* Tile_Layer::mutable_features(int index) {
  // @@protoc_insertion_point(field_mutable:vector_tile.Tile.Layer.features)
  return features_.Mutable(index);
}
::vector_tile::Tile_Feature* Tile_Layer::add_features() {
  // @@protoc_insertion_point(field_add:vector_tile.Tile.Layer.features)
  return features_.Add();
}
::google::protobuf::RepeatedPtrField< ::vector_tile::Tile_Feature >*
Tile_Layer::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:vector_tile.Tile.Layer.features)
  return &features_;
}
const ::google::protobuf::RepeatedPtrField< ::vector_tile::Tile_Feature >&
Tile_Layer::features() const {
  // @@protoc_insertion_point(field_list:vector_tile.Tile.Layer.features)
  return features_;
}

// repeated string keys = 3;
int Tile_Layer::keys_size() const {
  return keys_.size();
}
void Tile_Layer::clear_keys() {
  keys_.Clear();
}
const ::std::string& Tile_Layer::keys(int index) const {
  // @@protoc_insertion_point(field_get:vector_tile.Tile.Layer.keys)
  return keys_.Get(index);
}
::std::string* Tile_Layer::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:vector_tile.Tile.Layer.keys)
  return keys_.Mutable(index);
}
void Tile_Layer::set_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:vector_tile.Tile.Layer.keys)
  keys_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void Tile_Layer::set_keys(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:vector_tile.Tile.Layer.keys)
  keys_.Mutable(index)->assign(std::move(value));
}
#endif
void Tile_Layer::set_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:vector_tile.Tile.Layer.keys)
}
void Tile_Layer::set_keys(int index, const char* value, size_t size) {
  keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:vector_tile.Tile.Layer.keys)
}
::std::string* Tile_Layer::add_keys() {
  // @@protoc_insertion_point(field_add_mutable:vector_tile.Tile.Layer.keys)
  return keys_.Add();
}
void Tile_Layer::add_keys(const ::std::string& value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:vector_tile.Tile.Layer.keys)
}
#if LANG_CXX11
void Tile_Layer::add_keys(::std::string&& value) {
  keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:vector_tile.Tile.Layer.keys)
}
#endif
void Tile_Layer::add_keys(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:vector_tile.Tile.Layer.keys)
}
void Tile_Layer::add_keys(const char* value, size_t size) {
  keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:vector_tile.Tile.Layer.keys)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Tile_Layer::keys() const {
  // @@protoc_insertion_point(field_list:vector_tile.Tile.Layer.keys)
  return keys_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Tile_Layer::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:vector_tile.Tile.Layer.keys)
  return &keys_;
}

// repeated .vector_tile.Tile.Value values = 4;
int Tile_Layer::values_size() const {
  return values_.size();
}
void Tile_Layer::clear_values() {
  values_.Clear();
}
const ::vector_tile::Tile_Value& Tile_Layer::values(int index) const {
  // @@protoc_insertion_point(field_get:vector_tile.Tile.Layer.values)
  return values_.Get(index);
}
::vector_tile::Tile_Value* Tile_Layer::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:vector_tile.Tile.Layer.values)
  return values_.Mutable(index);
}
::vector_tile::Tile_Value* Tile_Layer::add_values() {
  // @@protoc_insertion_point(field_add:vector_tile.Tile.Layer.values)
  return values_.Add();
}
::google::protobuf::RepeatedPtrField< ::vector_tile::Tile_Value >*
Tile_Layer::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:vector_tile.Tile.Layer.values)
  return &values_;
}
const ::google::protobuf::RepeatedPtrField< ::vector_tile::Tile_Value >&
Tile_Layer::values() const {
  // @@protoc_insertion_point(field_list:vector_tile.Tile.Layer.values)
  return values_;
}

// optional uint32 extent = 5 [default = 4096];
bool Tile_Layer::has_extent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Tile_Layer::set_has_extent() {
  _has_bits_[0] |= 0x00000002u;
}
void Tile_Layer::clear_has_extent() {
  _has_bits_[0] &= ~0x00000002u;
}
void Tile_Layer::clear_extent() {
  extent_ = 4096u;
  clear_has_extent();
}
::google::protobuf::uint32 Tile_Layer::extent() const {
  // @@protoc_insertion_point(field_get:vector_tile.Tile.Layer.extent)
  return extent_;
}
void Tile_Layer::set_extent(::google::protobuf::uint32 value) {
  set_has_extent();
  extent_ = value;
  // @@protoc_insertion_point(field_set:vector_tile.Tile.Layer.extent)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Tile::kLayersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Tile::Tile()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_vector_5ftile_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:vector_tile.Tile)
}
Tile::Tile(const Tile& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      layers_(from.layers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  // @@protoc_insertion_point(copy_constructor:vector_tile.Tile)
}

void Tile::SharedCtor() {
  _cached_size_ = 0;
}

Tile::~Tile() {
  // @@protoc_insertion_point(destructor:vector_tile.Tile)
  SharedDtor();
}

void Tile::SharedDtor() {
}

void Tile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Tile& Tile::default_instance() {
  protobuf_vector_5ftile_2eproto::InitDefaults();
  return *internal_default_instance();
}

Tile* Tile::New(::google::protobuf::Arena* arena) const {
  Tile* n = new Tile;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Tile::Clear() {
// @@protoc_insertion_point(message_clear_start:vector_tile.Tile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  layers_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Tile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:vector_tile.Tile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vector_tile.Tile.Layer layers = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_layers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        if ((128u <= tag && tag < 65536u)) {
          DO_(_extensions_.ParseField(tag, input,
              internal_default_instance(),
              &unknown_fields_stream));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vector_tile.Tile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vector_tile.Tile)
  return false;
#undef DO_
}

void Tile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vector_tile.Tile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vector_tile.Tile.Layer layers = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->layers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->layers(static_cast<int>(i)), output);
  }

  // Extension range [16, 8192)
  _extensions_.SerializeWithCachedSizes(
      16, 8192, output);

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:vector_tile.Tile)
}

size_t Tile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vector_tile.Tile)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated .vector_tile.Tile.Layer layers = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->layers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->layers(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tile::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Tile*>(&from));
}

void Tile::MergeFrom(const Tile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vector_tile.Tile)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  layers_.MergeFrom(from.layers_);
}

void Tile::CopyFrom(const Tile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vector_tile.Tile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tile::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if (!::google::protobuf::internal::AllAreInitialized(this->layers())) return false;
  return true;
}

void Tile::Swap(Tile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Tile::InternalSwap(Tile* other) {
  using std::swap;
  layers_.InternalSwap(&other->layers_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::std::string Tile::GetTypeName() const {
  return "vector_tile.Tile";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Tile

// repeated .vector_tile.Tile.Layer layers = 3;
int Tile::layers_size() const {
  return layers_.size();
}
void Tile::clear_layers() {
  layers_.Clear();
}
const ::vector_tile::Tile_Layer& Tile::layers(int index) const {
  // @@protoc_insertion_point(field_get:vector_tile.Tile.layers)
  return layers_.Get(index);
}
::vector_tile::Tile_Layer* Tile::mutable_layers(int index) {
  // @@protoc_insertion_point(field_mutable:vector_tile.Tile.layers)
  return layers_.Mutable(index);
}
::vector_tile::Tile_Layer* Tile::add_layers() {
  // @@protoc_insertion_point(field_add:vector_tile.Tile.layers)
  return layers_.Add();
}
::google::protobuf::RepeatedPtrField< ::vector_tile::Tile_Layer >*
Tile::mutable_layers() {
  // @@protoc_insertion_point(field_mutable_list:vector_tile.Tile.layers)
  return &layers_;
}
const ::google::protobuf::RepeatedPtrField< ::vector_tile::Tile_Layer >&
Tile::layers() const {
  // @@protoc_insertion_point(field_list:vector_tile.Tile.layers)
  return layers_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace vector_tile

// @@protoc_insertion_point(global_scope)
